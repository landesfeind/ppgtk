%h{
#include <ppgtk/slide.h>
%}

/**
  * The fullscreen display for a single slide.
  *
  * The PPGtk:Display is a undecorated window that will 
  * just display a single PDF page in full screen mode.
  * The PPGtk:Display will do a best guess to find a second 
  * monitor and will expand to that window.
  * If this is not possible, the it will present the slide in 
  * single monitor mode, that is overdrawing the main window.
  *
  * The PPGtk:Display is mainly controlled from the PPGtk:Presenter.
  */
class PPGtk:Display from Gtk:Window {

	/**
	  * The parent window that is used. This is usually a PPGtk:Presenter.
	  */
	private Gtk:Window *parent = NULL;
	property OBJECT parent (
			blurb = _("The parental window if this display"),
			object_type = Gtk:Window,
			flags = CONSTRUCT,
			export, link);

	/**
	  * The currently used monitor to show the fullscreen display.
	  * This can change to switch the PPGtk:Presenter and the PPGtk:Display
	  * in case it is displayed on the wrong monitor.
	  * @see PPGtk::Display::switch_monitor()
	  */
	private gint display_monitor = -1;

	/**
	  * The slide to display in this window.
	  */
	private PPGtk:Slide *slide = NULL;
	property OBJECT slide (
			flags = CONSTRUCT_ONLY,
			object_type = PPGtk:Slide,
			export, link);

	constructor(self){
		gtk_container_add(GTK_CONTAINER(self), GTK_WIDGET(selfp->slide));
		g_object_set(G_OBJECT(selfp->slide), "expand", TRUE, NULL);
		g_signal_connect(G_OBJECT(self), "show", G_CALLBACK(self_on_show), NULL);
	}

	/**
	  * Create a new display object. 
	  * 
	  * @param parent the parental window (not null).
	  * @returns the newly created display.
	  */
	public PPGtk:Display *new(Gtk:Window *parent (check null type), PPGtk:Slide *slide (check null type)) onerror NULL {
		return GET_NEW_VARG("type", GTK_WINDOW_POPUP, "parent", parent, "slide", slide, NULL);
	}

	/**
	  * Check if the current setup has more than one monitor associated.
	  * Only then, the presenter can fully perform.
	  *
	  * @return @c TRUE if there are more than one monitor.
	  */
	public gboolean is_valid(self){
		GdkScreen *default_screen = gdk_screen_get_default();
		return gdk_screen_get_n_monitors(default_screen) > 1;
	}

	/**
	  * Switch the monitor if there are more than one.
	  */
	public void switch_monitor(self){
		GdkScreen *default_screen = gdk_screen_get_default();
		gint monitors = gdk_screen_get_n_monitors(default_screen);
		g_debug("Old display monitor is: %d", selfp->display_monitor);
		selfp->display_monitor = selfp->display_monitor + 1 < monitors
			? selfp->display_monitor + 1
			: 0;
		g_debug("New display monitor is: %d", selfp->display_monitor);
		self_determine_monitor(self);
		gtk_widget_queue_draw(GTK_WIDGET(self));
	}
	

	/**
	  * Callback to be executed when the \c show property of the Gtk:Widget parent changes.
	  *
	  * This will check for enough monitors and adjust to the required monitor size and
	  * offset.
	  */
	private void on_show(Gtk:Widget *w, gpointer data){
		PPGTK_UNUSED(data);
		if( ! gtk_widget_get_visible(w) )
			return;
		if( ! IS_SELF(w) )
			return;
		Self *self = SELF(w);
		// Reset display monitor because we are currently not shown
		selfp->display_monitor = -1;
		self_determine_monitor(self);
		gtk_widget_queue_draw(w);
	}

	/**
	  * Determine the monitor to display the Gtk:Window on.
	  * The PPGtk:Display will try to display itself on another
	  * monitor than the PPGtk:Presenter.
	  * If only one monitor is plugged in, than the display will be
	  * shown in fullscreen and the PPGtk:Presenter is not shown.
	  */
	private void determine_monitor(self){
		GdkScreen *default_screen = gdk_screen_get_default();
		gint monitors = gdk_screen_get_n_monitors(default_screen);
		g_debug("Have GdkScreen with size %d %d and %d monitors", gdk_screen_get_width(default_screen), gdk_screen_get_height(default_screen), monitors);
		if( monitors == 1 ){
			selfp->display_monitor = 0;
		}
		else if( selfp->display_monitor < 0 || selfp->display_monitor >= monitors ){
			gint posx, posy;
			gtk_window_get_position(selfp->parent, &posx, &posy);
			gint main_monitor = gdk_screen_get_monitor_at_point(default_screen, posx, posy);
			g_debug("Presenter console is shown on %d", main_monitor);
			selfp->display_monitor = main_monitor == 0 ? 1 : 0;
		}

		GdkRectangle mgeo;
		gdk_screen_get_monitor_geometry(default_screen, selfp->display_monitor, &mgeo);
		g_debug("Display monitor (%d) has geometry %d x %d and offset %d x %d", selfp->display_monitor, mgeo.width, mgeo.height, mgeo.x, mgeo.y);
		g_debug("Moving window to %d %d", mgeo.x, mgeo.y);
		gtk_window_move(GTK_WINDOW(self), mgeo.x, mgeo.y);
#if DEBUG_DISPLAYS
		g_warning(PPGTK_NAME" was compiled using the DEBUG flag. Will not show presenter in full size.");
#else
		g_debug("Setting display size to: %d %d", mgeo.width, mgeo.height);
		gtk_widget_set_size_request(GTK_WIDGET(self), -1, -1);
		gtk_window_set_default_size(GTK_WINDOW(self), mgeo.width, mgeo.height);
		gtk_window_resize(GTK_WINDOW(self), mgeo.width, mgeo.height);
#endif
	}


}
