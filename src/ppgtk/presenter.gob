%h{
#include <ppgtk/ppgtk.h>
#include <ppgtk/document.h>
#include <ppgtk/slide.h>
#include <ppgtk/display.h>
#include <ppgtk/timedialog.h>

#define PPGTK_ACTION_OPEN "open"
#define PPGTK_ACTION_NEXT "next"
#define PPGTK_ACTION_PREVIOUS "previous"
#define PPGTK_ACTION_FREEZE "freeze"
#define PPGTK_ACTION_BLANK "blank"
#define PPGTK_ACTION_PRESENT "present"
#define PPGTK_ACTION_RESET "reset"
#define PPGTK_ACTION_SWITCH "switch-monitor"
#define PPGTK_ACTION_SET_TIME "set-time"
%}

class PPGtk:Presenter from Gtk:Application:Window {

	/**
	  * The file chooser to open PDF documents. Keep it to 
	  * reuse it if another file is opened
	  */
	private Gtk:Widget *filechooser = NULL
		unrefwith g_object_unref;
	
	/**
	  * The time the presenter has to finish
	  */
	private gint presentation_time = 1800; 
	property INT presentation_time (
			name = "presentation-time",
			blurb = _("The time to present in seconds"),
			minimum = 0,
			default_value = 1800,
			export, link);
	private gint64 presentation_start_time = -1;

	/**
	  * An object to access the document.
	  */
	private PPGtk:Document *document = NULL
		unrefwith g_object_unref;
	property OBJECT document (
			object_type = PPGtk:Document,
			export, link);
		
	private PPGtk:Display *display = NULL
		destroywith gtk_widget_destroy;
	/** The PPGtk:Slide that displays the current page in the console */
	private PPGtk:Slide *slide_current   = { ppgtk_slide_new() };
	/** The PPGtk:Slide that displays the next page in the console */
	private PPGtk:Slide *slide_next      = { ppgtk_slide_new_with_offset(1) };
	/** The PPGtk:Slide that displays the current page in the presenter */
	private PPGtk:Slide *slide_presenter = { ppgtk_slide_new() };

	private Gtk:Drawing:Area *draw_counter = { (GtkDrawingArea *)gtk_drawing_area_new(); };
	private Gtk:Drawing:Area *draw_time = { (GtkDrawingArea *)gtk_drawing_area_new(); };

	private Gtk:Button *button_prev = { (GtkButton *)gtk_button_new() };
	private Gtk:Button *button_next = { (GtkButton *)gtk_button_new() };
	private Gtk:Toggle:Button *tbutton_freeze = { (GtkToggleButton *)gtk_check_button_new_with_mnemonic(_("_Freeze")) };
	private Gtk:Toggle:Button *tbutton_blank  = { (GtkToggleButton *)gtk_check_button_new_with_mnemonic(_("_Blank")) };


	constructor(self){
		selfp->display = ppgtk_display_new(GTK_WINDOW(self), selfp->slide_presenter);
		self_init_actions(self);
		gtk_window_set_title(GTK_WINDOW(self), PPGTK_NAME);

		GtkGrid *grid = (GtkGrid *)gtk_grid_new();
		gtk_container_add(GTK_CONTAINER(self), GTK_WIDGET(grid));

		GtkGrid *button_grid = (GtkGrid *)gtk_grid_new();
		g_object_set(G_OBJECT(button_grid), "hexpand", TRUE, "vexpand", FALSE, "margin-top", 1, NULL);

		GtkGrid *text_grid = (GtkGrid *)gtk_grid_new();
		g_object_set(G_OBJECT(text_grid), "hexpand", TRUE, "vexpand", FALSE, "margin-top", 1, NULL);

		gtk_widget_set_size_request(GTK_WIDGET(selfp->slide_current), 300, 300);
		g_object_set(G_OBJECT(selfp->slide_current), "hexpand", TRUE, "vexpand", TRUE, "margin-right", 1, NULL);
		gtk_widget_set_size_request(GTK_WIDGET(selfp->slide_next), 100, 100);
		g_object_set(G_OBJECT(selfp->slide_next), "hexpand", TRUE, "vexpand", TRUE, "margin-bottom", 1, NULL);


		g_object_set(G_OBJECT(text_grid          ), "margin-top", 1, NULL);
		gtk_widget_set_size_request(GTK_WIDGET(selfp->draw_counter), -1, 100);
		g_object_set(G_OBJECT(selfp->draw_counter), "expand", TRUE, "margin", 2, NULL);
		gtk_widget_set_size_request(GTK_WIDGET(selfp->draw_time), -1, 100);
		g_object_set(G_OBJECT(selfp->draw_time), "expand", TRUE, "margin", 2, NULL);
		gtk_grid_attach(text_grid, GTK_WIDGET(selfp->draw_time   ), 0, 2, 1, 1);
		gtk_grid_attach(text_grid, GTK_WIDGET(selfp->draw_counter), 1, 2, 1, 1);

		gtk_grid_attach(button_grid, GTK_WIDGET(selfp->button_prev   ), 0, 0, 1, 1);
		gtk_grid_attach(button_grid, GTK_WIDGET(selfp->tbutton_freeze), 1, 0, 1, 1);
		gtk_grid_attach(button_grid, GTK_WIDGET(selfp->tbutton_blank ), 2, 0, 1, 1);
		gtk_grid_attach(button_grid, GTK_WIDGET(selfp->button_next   ), 3, 0, 1, 1);
		g_object_set(G_OBJECT(button_grid          ), "margin-top", 1, NULL);
		g_object_set(G_OBJECT(selfp->button_prev   ), "hexpand", FALSE, "vexpand", TRUE, NULL);
		g_object_set(G_OBJECT(selfp->tbutton_freeze), "hexpand", TRUE, "vexpand", TRUE, "margin-right", 1, NULL);
		g_object_set(G_OBJECT(selfp->tbutton_blank ), "hexpand", TRUE, "vexpand", TRUE, "margin-right", 1, NULL);
		g_object_set(G_OBJECT(selfp->button_next   ), "hexpand", FALSE, "vexpand", TRUE, "margin-right", 1, NULL);

		gtk_container_add(GTK_CONTAINER(selfp->button_prev), gtk_image_new_from_icon_name("previous", GTK_ICON_SIZE_BUTTON));
		gtk_container_add(GTK_CONTAINER(selfp->button_next), gtk_image_new_from_icon_name("forward", GTK_ICON_SIZE_BUTTON));

		gtk_actionable_set_action_name(GTK_ACTIONABLE(selfp->button_prev), "win."PPGTK_ACTION_PREVIOUS);
		gtk_actionable_set_action_name(GTK_ACTIONABLE(selfp->button_next), "win."PPGTK_ACTION_NEXT);
		gtk_actionable_set_action_name(GTK_ACTIONABLE(selfp->tbutton_freeze), "win."PPGTK_ACTION_FREEZE);
		gtk_actionable_set_action_name(GTK_ACTIONABLE(selfp->tbutton_blank), "win."PPGTK_ACTION_BLANK);


		gtk_grid_attach(grid, GTK_WIDGET(selfp->slide_current ), 0, 0, 1, 2);
		gtk_grid_attach(grid, GTK_WIDGET(selfp->slide_next    ), 1, 0, 1, 1);
		gtk_grid_attach(grid, GTK_WIDGET(text_grid            ), 0, 2, 2, 1);
		gtk_grid_attach(grid, GTK_WIDGET(button_grid          ), 0, 3, 2, 1);


		//g_signal_connect(G_OBJECT(selfp->draw_counter), "draw", G_CALLBACK(&self_on_draw_counter), self);
		//g_signal_connect(G_OBJECT(selfp->draw_time   ), "draw", G_CALLBACK(&self_on_draw_time), self);
		g_signal_connect(G_OBJECT(self), "notify::document", G_CALLBACK(&self_on_notify_document), NULL);
	}

	dispose(self){
		g_debug("Disposing window to display");
	}

	private void init_actions(self){
		GSimpleAction *action = NULL;

		action = g_simple_action_new(PPGTK_ACTION_OPEN, NULL);
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_open), self);
		g_simple_action_set_enabled(action, TRUE);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));

		action = g_simple_action_new("close", NULL);
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_close), self);
		g_simple_action_set_enabled(action, TRUE);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));

		action = g_simple_action_new(PPGTK_ACTION_NEXT, NULL);
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_next), self);
		g_simple_action_set_enabled(action, TRUE);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));

		action = g_simple_action_new(PPGTK_ACTION_PREVIOUS, NULL);
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_previous), self);
		g_simple_action_set_enabled(action, FALSE); 
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));

		action = g_simple_action_new("about", NULL);
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_about), self);
		g_simple_action_set_enabled(action, selfp->document != NULL);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));

		action = g_simple_action_new(PPGTK_ACTION_PRESENT, NULL);
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_present), self);
		g_simple_action_set_enabled(action, selfp->document != NULL);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));

		action = g_simple_action_new(PPGTK_ACTION_RESET, NULL);
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_reset), self);
		g_simple_action_set_enabled(action, selfp->document != NULL);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));

		action = g_simple_action_new_stateful(PPGTK_ACTION_BLANK, NULL, g_variant_new("b", FALSE));
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_blank), self);
		g_simple_action_set_enabled(action, TRUE);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));
		g_signal_connect(action, "change-state", G_CALLBACK(&self_on_change_state_blank), self);

		action = g_simple_action_new_stateful(PPGTK_ACTION_FREEZE, NULL, g_variant_new("b", FALSE));
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_freeze), self);
		g_simple_action_set_enabled(action, TRUE);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));
		g_signal_connect(action, "change-state", G_CALLBACK(&self_on_change_state_freeze), self);

		action = g_simple_action_new(PPGTK_ACTION_SWITCH, NULL);
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_switch), self);
		g_simple_action_set_enabled(action, selfp->document != NULL);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));

		action = g_simple_action_new(PPGTK_ACTION_SET_TIME, NULL);
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_set_time), self);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));
	}

	/**
	  * Creates a new presenter with a given application.
	  */
	public PPGtkPresenter *new(Gtk:Application *app){
		return GET_NEW_VARG("application", app, NULL);
	}

	/**
	  * Creates a new presenter for the given application and automatically
	  * opens the given file.
	  */
	public PPGtkPresenter *new_with_file(Gtk:Application *app (check null type), G:File *pdf_file (check null type)){
		Self *self = self_new(app);
		self_open_file_single(self, pdf_file);
		return self;
	}




	public gboolean set_document_from_file(self,  G:File *pdf_file (check null type)) onerror FALSE {
		GError *error = NULL;
		PPGtkDocument *doc = ppgtk_document_new_from_file(pdf_file, NULL, &error);
		if( ! doc || error ){
			self_display_error(self, error->message);
			g_error_free(error);
			if( doc )
				g_object_unref(doc);
			return FALSE;
		}
		
		self_set_document(self, G_OBJECT(doc));
		g_object_unref(doc);	
		return TRUE;
	}



	/**
	  * Reset the presentation. This results in setting the current slide to the
	  * first slide and stopping the elapsed timer.
	  */
	public void reset(self){
		// FIXME:
		// - reset presentation timer
		ppgtk_document_set_current_page(selfp->document, 0);
	}

	/**
	  * Set to freeze the presentation mode, i.e. not updating the PPGtk:Display.
	  */
	private void set_freeze(self, gboolean freeze){
		GAction *a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_FREEZE);
		GVariant *v = g_variant_new("b", freeze);
		g_action_change_state(a, v);
	}

	/**
	  * Check if the presenter is currently in "freeze"-mode. In that case
	  * the display is not being updated but presents the current slide.
	  */
	private gboolean get_freeze(self){
		GAction *a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_FREEZE);
		GVariant *v = g_action_get_state(a);
		gboolean freeze = g_variant_get_boolean(v);
		return freeze;
	}

	private gboolean get_blank(self){
		GAction *a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_BLANK);
		GVariant *v = g_action_get_state(a);
		gboolean blank = g_variant_get_boolean(v);
		g_debug("Queried blank state is: %s", blank ? "blank" : "show");
		return blank;
	}

	private void set_blank(self, gboolean blank){
		GAction *a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_BLANK);
		GVariant *v = g_variant_new("b", blank);
		g_action_change_state(a, v);
	}

	public void set_time(self){
		PPGtkTimedialog *d = ppgtk_timedialog_new(GTK_WINDOW(self));
		ppgtk_timedialog_set_seconds(d, selfp->presentation_time);

		gint r = gtk_dialog_run(GTK_DIALOG(d));
		if( r == GTK_RESPONSE_ACCEPT ){
			selfp->presentation_time = ppgtk_timedialog_get_seconds(d);
			gtk_widget_queue_draw(GTK_WIDGET(selfp->draw_time));
		}
		gtk_widget_destroy(GTK_WIDGET(d));
		return;
	}

//	private void draw_text(Gtk:Widget *w, cairo_t *cr, gchar *text){
//		gdouble widget_width  = (gdouble)gtk_widget_get_allocated_width(w);
//		gdouble widget_height = (gdouble)gtk_widget_get_allocated_height(w);
//
//		cairo_move_to(cr, 0, 0);
//		cairo_line_to(cr, widget_width, 0);
//		cairo_line_to(cr, widget_width, widget_height);
//		cairo_line_to(cr, 0, widget_height);
//		cairo_set_source_rgb(cr, 0, 0, 0);
//		cairo_stroke(cr);
//		
//		gint text_width, text_height;
//		PangoLayout *layout = pango_cairo_create_layout(cr);
//		pango_layout_set_text(layout, text, -1);
//		pango_layout_get_size(layout, &text_width, &text_height);
//		text_width  /= PANGO_SCALE;
//		text_height /= PANGO_SCALE;
//
//		gdouble scalew = widget_width / text_width ;
//		gdouble scaleh = widget_height / text_height;
//		gdouble scale = scalew < scaleh ? scalew : scaleh;
//		scale *= 0.9;
//		cairo_move_to(cr, (widget_width - (text_width*scale))/2, (widget_height - (text_height*scale))/2);
//		//cairo_move_to(cr, 0, 0);
//		cairo_scale(cr, scale, scale);
//		pango_cairo_show_layout(cr, layout);
//	}
//
//
//	private gboolean on_draw_counter(GtkWidget *w, cairo_t *cr, gpointer data){
//		gchar buffer[25];
//		Self *self = SELF(data);
//		self_ensure_document(self);
//
//		if( ! selfp->document )
//			return TRUE;
//
//		sprintf(buffer, "%d / %d", selfp->slide + 1, poppler_document_get_n_pages(selfp->document));
//		self_draw_text(w, cr, buffer);
//		return TRUE;
//	}
//
//	private gboolean on_draw_time(GtkWidget *w, cairo_t *cr, gpointer data){
//		Self *self = SELF(data);
//		self_ensure_document(self);
//		if( ! selfp->document )
//			return TRUE;
//
//		gchar *text = self_format_remaining_time(self, NULL);
//		self_draw_text(w, cr, text);
//		return TRUE;
//	}

	/** Action callback when the "close" action is activated **/
	private void on_action_close(G:Action *a, G:Variant *param, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(param);
		if( GTK_IS_WINDOW(data) )
			gtk_widget_destroy(GTK_WIDGET(data));
	}


	/**
	  * Action callback to start the timer and presentation
	  */
	private void on_action_present(G:Action *a, G:Variant *param, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(param);
		Self *self = SELF(data);

		if( gtk_widget_get_visible(GTK_WIDGET(selfp->display)) ){
			g_debug("Switching presenter mode off");
			gtk_widget_hide(GTK_WIDGET(selfp->display));
			gtk_window_unfullscreen(GTK_WINDOW(self));
		}
		else {
			g_debug("Switching presenter mode on");
			gtk_widget_show_all(GTK_WIDGET(selfp->display));
			gtk_window_fullscreen(GTK_WINDOW(self));
		}
	}


	/**
	  * Action callback to reset the timer and slide of the curret presentation
	  */
	private void on_action_reset(G:Action *a, G:Variant *param, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(param);
		g_return_if_fail( PPGTK_OBJECT_IS(data, TYPE_SELF) );
		self_reset(SELF(data));
	}

	/**
	  * Action callback to move to the previous slide.
	  */
	private void on_action_previous(G:Action *a, G:Variant *param, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(param);
		g_return_if_fail( PPGTK_OBJECT_IS(data, TYPE_SELF) );
		Self *self = SELF(data);
		ppgtk_document_previous_page(selfp->document);
	}

	/**
	  * Action callback to move to the next slide.
	  */
	private void on_action_next(G:Action *a, G:Variant *param, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(param);
		g_return_if_fail( PPGTK_OBJECT_IS(data, TYPE_SELF) );
		Self *self = SELF(data);
		ppgtk_document_next_page(selfp->document);
		// FIXME: start presentation time
	}

	/**
	  * Action callback to show an about dialog.
	  */
	private void on_action_about(G:Action *a, G:Variant *param, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(param);
		Self *self = SELF(data);

		GtkWidget *dialog = gtk_about_dialog_new();
		gtk_widget_set_parent(GTK_WIDGET(dialog), GTK_WIDGET(self));
		gtk_about_dialog_set_program_name(GTK_ABOUT_DIALOG(dialog), PPGTK_NAME);
		gtk_about_dialog_set_version(GTK_ABOUT_DIALOG(dialog), "PPGTK_VERSION_MAJOR.PPGTK_VERSION_MINOR.PPGTK_VERSION_PATCH");
		gtk_about_dialog_set_copyright(GTK_ABOUT_DIALOG(dialog), _("Copyright 2014"));
		gtk_about_dialog_set_license_type(GTK_ABOUT_DIALOG(dialog), GTK_LICENSE_GPL_3_0);
		gtk_about_dialog_set_website(GTK_ABOUT_DIALOG(dialog), "http://www.github.de/landesfeind/ppgtk");

		//gchar *authors[] = (gchar *[]){ PPGTK_AUTHOR, NULL };
		//gtk_about_dialog_set_authors(GTK_ABOUT_DIALOG(dialog), authors);

		gtk_dialog_run(GTK_DIALOG(dialog));
		gtk_widget_destroy(GTK_WIDGET(dialog));
	}

	private void on_action_open(G:Simple:Action *a, G:Variant *v, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(v);
		self_open_file(SELF(data));
	}

	private void on_action_blank(G:Simple:Action *a, G:Variant *v, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(v);
		Self *self = SELF(data);

		v = g_action_get_state(G_ACTION(a));
		//g_debug("Blank action with state: %s", v == NULL ? "NULLVARIANT" : g_variant_get_boolean(v) ? "true" :"false");
		v = g_variant_new("b", ! g_variant_get_boolean(v));
		g_action_change_state(G_ACTION(a), v);

		ppgtk_slide_set_blank(selfp->slide_presenter, ! g_variant_get_boolean(v));
	}

	private void on_action_freeze(G:Simple:Action *a, G:Variant *v, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(v);
		Self *self = SELF(data);

		v = g_action_get_state(G_ACTION(a));
		//g_debug("Freeze action with state: %s", v == NULL ? "NULLVARIANT" : g_variant_get_boolean(v) ? "true" :"false");
		v = g_variant_new("b", ! g_variant_get_boolean(v));
		g_action_change_state(G_ACTION(a), v);

		ppgtk_slide_set_blank(selfp->slide_presenter, ! g_variant_get_boolean(v));
	}

	private void on_change_state_freeze(G:Simple:Action *a, G:Variant *v, gpointer data){
		PPGTK_UNUSED(data);
		g_debug("Changing freeze state to: %s", g_variant_get_boolean(v) ? "true" : "false");
		g_simple_action_set_state(a, v);
	}

	private void on_change_state_blank(G:Simple:Action *a, G:Variant *v, gpointer data){
		PPGTK_UNUSED(data);
		g_debug("Changing blank state to: %s", g_variant_get_boolean(v) ? "true" : "false");
		g_simple_action_set_state(a, v);
	}

	/**
	  * Display a message dialog that is modal for the PPGtk:Presenter window.
	  */
	private void display_message(self, GtkMessageType type, const gchar *msg, va_list vl){
		GString *message = g_string_new(NULL);
		g_string_vprintf(message, msg, vl);

		GtkWidget *dialog = gtk_message_dialog_new(GTK_WINDOW(self), 
					GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT, 
					type, 
					GTK_BUTTONS_OK,
					"%s", message->str);
		gtk_widget_show_all(GTK_WIDGET(dialog));
		gtk_dialog_run(GTK_DIALOG(dialog));
		gtk_widget_destroy(GTK_WIDGET(dialog));
	}

	private void on_action_switch(G:Simple:Action *a, G:Variant *v, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(v);
		Self *self = SELF(data);
		ppgtk_display_switch_monitor(selfp->display);
	}

	private void on_action_set_time(G:Simple:Action *a, G:Variant *v, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(v);
		Self *self = SELF(data);
		ppgtk_presenter_set_time(self);
	}


	/**
	  * Displays an error message. 
	  * @see ppgtk_presenter_display_message
	  */
	public void display_error(self, const gchar *msg, ...){
		va_list vl;
		va_start(vl, msg);
		self_display_message(self, GTK_MESSAGE_ERROR, msg, vl);
		va_end(vl);
	}

	/**
	  * Displays an informational message. 
	  * @see ppgtk_presenter_display_message
	  */
	public void display_info(self, const gchar *msg, ...){
		va_list vl;
		va_start(vl, msg);
		self_display_message(self, GTK_MESSAGE_INFO, msg, vl);
		va_end(vl);
	}

//	/**
//	  * Tries to open the file and to load the poppler object.
//	  * Returns true when the file is successfully opened. 
//	  */
//	private gboolean ensure_document(self){
//		if( selfp->document )
//			return TRUE;
//
//		if( ! selfp->file )
//			return FALSE;
//
//		if( ! g_file_query_exists(selfp->file, NULL) ){
//			self_display_error(self, _("File does not exist"));
//			return FALSE;
//		}
//
//		if( g_file_query_file_type(selfp->file, G_FILE_QUERY_INFO_NONE, NULL) != G_FILE_TYPE_REGULAR ){
//			self_display_error(self, _("Not a regular file"));
//			return FALSE;
//		}
//
//		GError *error = NULL;
//		gchar *file = g_file_get_uri(selfp->file);
//		selfp->document = poppler_document_new_from_file(file, NULL, &error);
//		g_free(file);
//		if( error ){
//			g_error(error->message);
//			self_display_error(self, error->message);
//			return FALSE;
//		}
//		if( ! selfp->document ){
//			self_display_error(self, _("Can not open document for unkown reason"));
//			return FALSE;
//		}
//		
//		g_debug("Displaying document with %d slides", poppler_document_get_n_pages(selfp->document));
//		
//		// Make title
//		gchar *title = poppler_document_get_title(selfp->document);
//		GString *titlen = g_string_new(title);
//		g_string_append(titlen, " - ");
//		g_string_append(titlen, PPGTK_NAME);
//		gtk_window_set_title(GTK_WINDOW(self), titlen->str);
//		g_string_free(titlen, TRUE);
//		g_free(title);
//
//		self_set_slide(self, 0);
//	
//		// Enable actions
//		GAction *a;
//		a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_NEXT);
//		g_simple_action_set_enabled(G_SIMPLE_ACTION(a), TRUE);
//		a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_PREVIOUS);
//		g_simple_action_set_enabled(G_SIMPLE_ACTION(a), TRUE);
//		a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_FREEZE);
//		g_simple_action_set_enabled(G_SIMPLE_ACTION(a), TRUE);
//		a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_BLANK);
//		g_simple_action_set_enabled(G_SIMPLE_ACTION(a), TRUE);
//		a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_PRESENT);
//		g_simple_action_set_enabled(G_SIMPLE_ACTION(a), TRUE);
//		a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_RESET);
//		g_simple_action_set_enabled(G_SIMPLE_ACTION(a), TRUE);
//		a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_SWITCH);
//		g_simple_action_set_enabled(G_SIMPLE_ACTION(a), TRUE);
//
//
//		return TRUE;
//	}
//
//

	public void open_file(self){
		if( ! selfp->filechooser ){
			selfp->filechooser = gtk_file_chooser_dialog_new(_("Open PDF Presentation"),
				NULL, GTK_FILE_CHOOSER_ACTION_OPEN,
				_("Cancel"), GTK_RESPONSE_CANCEL,
				_("Open"), GTK_RESPONSE_ACCEPT,
				NULL);

			gtk_file_chooser_set_local_only(GTK_FILE_CHOOSER(selfp->filechooser), TRUE);
			gtk_file_chooser_set_select_multiple(GTK_FILE_CHOOSER(selfp->filechooser), TRUE);

			GtkFileFilter *ff = gtk_file_filter_new();
			gtk_file_filter_set_name(ff, "Portable Document Format (*.pdf)");
			gtk_file_filter_add_mime_type(ff, "application/pdf");
			gtk_file_chooser_add_filter(GTK_FILE_CHOOSER(selfp->filechooser), ff);

			g_object_ref(selfp->filechooser);
		}

		g_debug("Running file chooser dialog to open PDF");
		gtk_widget_show_all(GTK_WIDGET(selfp->filechooser));
		gint res = gtk_dialog_run(GTK_DIALOG(selfp->filechooser));
		gtk_widget_hide(GTK_WIDGET(selfp->filechooser));
		if( res != GTK_RESPONSE_ACCEPT )
			return;

		GSList *list = gtk_file_chooser_get_filenames(GTK_FILE_CHOOSER(selfp->filechooser));
		if( ! list )
			return;
		g_debug("Running file chooser dialog returned with %d files", (gint)g_slist_length(list));
	
		for(guint i = 0; i < g_slist_length(list); i++){
			gpointer data = g_slist_nth_data(list, i);
			if( data ){
				GFile *f = g_file_new_for_path((gchar *)data);
				self_open_file_single(self, f);
				g_object_unref(f);
			}
		}

		g_slist_free_full(list, g_free);
	}
	
	public void open_file_single(self, G:File *file (check null type)){
		g_debug("Opening %swindow to show document %s", selfp->document ? "new " : "", g_file_get_path(file));
		if( selfp->document ){ 
			GtkApplication *app = gtk_window_get_application(GTK_WINDOW(self));
			Self *window = self_new_with_file(app, file);
			gtk_widget_show_all(GTK_WIDGET(window));
			gtk_application_add_window(GTK_APPLICATION(self), GTK_WINDOW(window));
		}
		else {
			self_set_document_from_file(self ,file);
		}
	}

	private gchar *format_remaining_time(self, gboolean *close_to_end){
		gint diff = 0;
		if( selfp->presentation_start_time >= 0 ){
			diff = (gint)(g_get_monotonic_time() - selfp->presentation_start_time);
			diff /= 1000000;
		}
		gint t;

		diff = selfp->presentation_time - diff;

		if( close_to_end ){
			*close_to_end = diff < 0.2 * selfp->presentation_time;
		}

		GString *text = g_string_new(NULL);
		gboolean use_double = FALSE;
		if( diff < 0 ){
			diff *= -1;
			g_string_append(text, "- ");
		}
		if( diff >= 3600 ){
			t = diff / 3600;
			g_string_append_printf(text, "%d", t);
			diff -= t * 3600;
			use_double = TRUE;
		}

		if( diff > 60 || use_double ){
			t = diff / 60;
			if( use_double )
				g_string_append_printf(text, ":%02d", t);
			else 
				g_string_append_printf(text, "%d", t);
			diff -= t * 60;
			use_double = TRUE;
		}

		if( use_double )
			g_string_append_printf(text, ":%02d", diff);
		else 
			g_string_append_printf(text, "%d", diff);

		return g_string_free(text, FALSE);
	}

	public gboolean on_idle_update_time(gpointer data){
		Self *self = SELF(data);
		gtk_widget_queue_draw(GTK_WIDGET(selfp->draw_time));
		if( selfp->presentation_start_time < 0 ){
			return G_SOURCE_REMOVE;
		}
		return G_SOURCE_CONTINUE;
	}

	private void on_notify_document(G:Object *o, G:Param:Spec *spec, gpointer data){
		g_return_if_fail( PPGTK_OBJECT_IS(o, TYPE_SELF) );
		PPGTK_UNUSED(spec);
		PPGTK_UNUSED(data);
		// Propagate the change of the document to all slides
		Self *self = SELF(o);
		ppgtk_slide_set_document(selfp->slide_current  , G_OBJECT(selfp->document));
		ppgtk_slide_set_document(selfp->slide_next     , G_OBJECT(selfp->document));
		ppgtk_slide_set_document(selfp->slide_presenter, G_OBJECT(selfp->document));
	}

}
