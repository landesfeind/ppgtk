%h{
#include <ppgtk/ppgtk.h>

#define PPGTK_ACTION_NEXT "next"
#define PPGTK_ACTION_PREVIOUS "previous"
#define PPGTK_ACTION_FREEZE "freeze"
#define PPGTK_ACTION_BLANK "blank"
#define PPGTK_ACTION_PRESENT "present"
#define PPGTK_ACTION_START "start"
#define PPGTK_ACTION_RESET "reset"
%}

class PPGtk:Presenter from Gtk:Application:Window {

	private Gtk:Widget *filechooser = NULL
		unrefwith g_object_unref;
	
	/**
	  * The file from which the document is loaded and displayed.
	  * Should be set when constructing the presenter. If not given,
	  * the presenter will just show blank data.
	  */
	private G:File *file = NULL
		unrefwith g_object_unref;
	property OBJECT file (
				nick = _("File"),
				object_type = G:File,
				export, link);

	/**
	  * An object to access the document.
	  */
	private Poppler:Document *document = NULL
		unrefwith g_object_unref;

		
	private PPGtk:Display *display = { ppgtk_display_new() }
		destroywith gtk_widget_destroy;
	private PPGtk:Slide *draw_current = { ppgtk_slide_new() };
	private PPGtk:Slide *draw_next    = { ppgtk_slide_new() };
	private Gtk:Drawing:Area *draw_counter = { (GtkDrawingArea *)gtk_drawing_area_new(); };

	private Gtk:Button *button_prev = { (GtkButton *)gtk_button_new() };
	private Gtk:Button *button_next = { (GtkButton *)gtk_button_new() };
	private Gtk:Toggle:Button *tbutton_freeze = { (GtkToggleButton *)gtk_check_button_new_with_mnemonic(_("_Freeze")) };
	private Gtk:Toggle:Button *tbutton_blank  = { (GtkToggleButton *)gtk_check_button_new_with_mnemonic(_("_Blank")) };
	
	private Gtk:Progress:Bar *progressbar_time = { (GtkProgressBar *)gtk_progress_bar_new() };
	private Gtk:Progress:Bar *progressbar_render = { (GtkProgressBar *)gtk_progress_bar_new() };

	private gint slide = 0;
	property INT slide (
				nick = "Current slide",
				default_value = 0,
				minimum = 0,
				export)
		set {
			gint index = g_value_get_int(VAL);
			if( ! selfp->document ){
				index = 0;
			}
			else if( index >= poppler_document_get_n_pages(selfp->document) ){
				index = poppler_document_get_n_pages(selfp->document) - 1;
			}
			selfp->slide = index;
		}
		get { 
			g_value_set_int(VAL, selfp->slide); 
		};


	constructor(self){
		self_init_actions(self);
		gtk_window_set_title(GTK_WINDOW(self), PPGTK_NAME);

		GtkGrid *grid = (GtkGrid *)gtk_grid_new();
		gtk_container_add(GTK_CONTAINER(self), GTK_WIDGET(grid));

		GtkGrid *button_grid = (GtkGrid *)gtk_grid_new();
		g_object_set(G_OBJECT(button_grid), "hexpand", TRUE, "vexpand", FALSE, "margin-top", 1, NULL);


		gtk_widget_set_size_request(GTK_WIDGET(selfp->draw_current), 300, 300);
		g_object_set(G_OBJECT(selfp->draw_current), "hexpand", TRUE, "vexpand", TRUE, "margin-right", 1, NULL);
		gtk_widget_set_size_request(GTK_WIDGET(selfp->draw_next), 100, 100);
		g_object_set(G_OBJECT(selfp->draw_next), "hexpand", TRUE, "vexpand", TRUE, "margin-bottom", 1, NULL);
		gtk_widget_set_size_request(GTK_WIDGET(selfp->draw_counter), 100, 50);
		g_object_set(G_OBJECT(selfp->draw_counter), "hexpand", FALSE, "vexpand", TRUE, NULL);

		gtk_grid_attach(button_grid, GTK_WIDGET(selfp->button_prev   ), 0, 0, 1, 1);
		gtk_grid_attach(button_grid, GTK_WIDGET(selfp->tbutton_freeze), 1, 0, 1, 1);
		gtk_grid_attach(button_grid, GTK_WIDGET(selfp->tbutton_blank ), 2, 0, 1, 1);
		gtk_grid_attach(button_grid, GTK_WIDGET(selfp->button_next   ), 3, 0, 1, 1);
		g_object_set(G_OBJECT(button_grid       ), "margin-top", 1, NULL);
		g_object_set(G_OBJECT(selfp->button_prev   ), "hexpand", FALSE, "vexpand", TRUE, NULL);
		g_object_set(G_OBJECT(selfp->tbutton_freeze), "hexpand", TRUE, "vexpand", TRUE, "margin-right", 1, NULL);
		g_object_set(G_OBJECT(selfp->tbutton_blank ), "hexpand", TRUE, "vexpand", TRUE, "margin-right", 1, NULL);
		g_object_set(G_OBJECT(selfp->button_next   ), "hexpand", FALSE, "vexpand", TRUE, "margin-right", 1, NULL);

		gtk_container_add(GTK_CONTAINER(selfp->button_prev), gtk_image_new_from_icon_name("previous", GTK_ICON_SIZE_BUTTON));
		gtk_container_add(GTK_CONTAINER(selfp->button_next), gtk_image_new_from_icon_name("forward", GTK_ICON_SIZE_BUTTON));

		gtk_actionable_set_action_name(GTK_ACTIONABLE(selfp->button_prev), "win.previous");
		gtk_actionable_set_action_name(GTK_ACTIONABLE(selfp->button_next), "win.next");
		gtk_actionable_set_action_name(GTK_ACTIONABLE(selfp->tbutton_freeze), "win.freeze");
		gtk_actionable_set_action_name(GTK_ACTIONABLE(selfp->tbutton_blank), "win.blank");
		//gtk_actionable_set_action_target_value(GTK_ACTIONABLE(selfp->tbutton_freeze), g_variant_new("b", TRUE));
		//gtk_actionable_set_action_target_value(GTK_ACTIONABLE(selfp->tbutton_blank), g_variant_new("b", TRUE));

		gtk_progress_bar_set_text(selfp->progressbar_render, "Pre-rendering pages...");
		gtk_progress_bar_set_fraction(selfp->progressbar_render, 1.0);
		gtk_progress_bar_set_show_text(selfp->progressbar_render, TRUE);

		gtk_progress_bar_set_text(selfp->progressbar_time, "Elapsed time");
		gtk_progress_bar_set_fraction(selfp->progressbar_time, 0.0);
		gtk_progress_bar_set_show_text(selfp->progressbar_time, TRUE);
		g_object_set(G_OBJECT(selfp->progressbar_time), "expand", TRUE, NULL);

		gtk_grid_attach(grid, GTK_WIDGET(selfp->draw_current      ), 0, 0, 1, 2);
		gtk_grid_attach(grid, GTK_WIDGET(selfp->draw_next         ), 1, 0, 1, 1);
		gtk_grid_attach(grid, GTK_WIDGET(selfp->draw_counter      ), 1, 1, 1, 1);
		gtk_grid_attach(grid, GTK_WIDGET(selfp->progressbar_time  ), 0, 2, 2, 1);
		gtk_grid_attach(grid, GTK_WIDGET(button_grid              ), 0, 3, 2, 1);
		gtk_grid_attach(grid, GTK_WIDGET(selfp->progressbar_render), 0, 4, 2, 1);

		g_signal_connect(G_OBJECT(selfp->draw_counter), "draw", G_CALLBACK(&self_on_draw_counter), self);
		g_signal_connect(G_OBJECT(self), "notify::slide", G_CALLBACK(&self_on_notify_slide), NULL);
		g_signal_connect(G_OBJECT(self), "notify::file", G_CALLBACK(&self_on_notify_file), NULL);
	}

	dispose(self){
		gchar *f = selfp->file ? g_file_get_path(selfp->file) : NULL;
		g_debug("Disposing window to display: %s", f);
		if(f)
			g_free(f);
	}

	private void init_actions(self){
		GSimpleAction *action = NULL;

		action = g_simple_action_new("open", NULL);
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_open), self);
		g_simple_action_set_enabled(action, TRUE);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));

		action = g_simple_action_new("open-new", NULL);
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_open_new_window), self);
		g_simple_action_set_enabled(action, TRUE);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));

		action = g_simple_action_new("close", NULL);
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_close), self);
		g_simple_action_set_enabled(action, TRUE);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));

		action = g_simple_action_new(PPGTK_ACTION_NEXT, NULL);
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_next), self);
		g_simple_action_set_enabled(action, TRUE);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));

		action = g_simple_action_new(PPGTK_ACTION_PREVIOUS, NULL);
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_previous), self);
		g_simple_action_set_enabled(action, FALSE); 
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));

		action = g_simple_action_new("about", NULL);
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_about), self);
		g_simple_action_set_enabled(action, selfp->document != NULL);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));

		action = g_simple_action_new(PPGTK_ACTION_PRESENT, NULL);
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_present), self);
		g_simple_action_set_enabled(action, selfp->document != NULL);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));


		action = g_simple_action_new(PPGTK_ACTION_START, NULL);
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_start), self);
		g_simple_action_set_enabled(action, selfp->document != NULL);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));

		action = g_simple_action_new(PPGTK_ACTION_RESET, NULL);
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_reset), self);
		g_simple_action_set_enabled(action, selfp->document != NULL);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));

		action = g_simple_action_new_stateful(PPGTK_ACTION_BLANK, NULL, g_variant_new("b", FALSE));
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_blank), self);
		g_simple_action_set_enabled(action, TRUE);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));
		g_signal_connect(action, "change-state", G_CALLBACK(&self_on_change_state_blank), self);

		action = g_simple_action_new_stateful(PPGTK_ACTION_FREEZE, NULL, g_variant_new("b", FALSE));
		g_signal_connect(G_OBJECT(action), "activate", G_CALLBACK(self_on_action_freeze), self);
		g_simple_action_set_enabled(action, TRUE);
		g_action_map_add_action(G_ACTION_MAP(self), G_ACTION(action));
		g_signal_connect(action, "change-state", G_CALLBACK(&self_on_change_state_freeze), self);
	}

	public PPGtkPresenter *new(Gtk:Application *app){
		return GET_NEW_VARG("application", app, NULL);
	}

	public PPGtkPresenter *new_with_file(Gtk:Application *app (check null type), G:File *pdf_file (check null type)){
		return GET_NEW_VARG("file", pdf_file, "application", app, NULL);
	}

	public void reset(self){
		self_set_slide(self, 0);
		gtk_widget_queue_draw(GTK_WIDGET(self));
	}

	private void set_freeze(self, gboolean freeze){
		GAction *a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_FREEZE);
		GVariant *v = g_variant_new("b", freeze);
		g_action_change_state(a, v);
	}

	private gboolean get_freeze(self){
		GAction *a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_FREEZE);
		GVariant *v = g_action_get_state(a);
		gboolean freeze = g_variant_get_boolean(v);
		return freeze;
	}

	private gboolean get_blank(self){
		GAction *a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_BLANK);
		GVariant *v = g_action_get_state(a);
		gboolean blank = g_variant_get_boolean(v);
		g_object_unref(v);
		g_object_unref(a);
		return blank;
	}

	private void set_blank(self, gboolean blank){
		GAction *a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_BLANK);
		GVariant *v = g_variant_new("b", blank);
		g_action_change_state(a, v);
	}


	private gboolean on_draw_counter(GtkWidget *w, cairo_t *cr, gpointer data){
		gchar buffer[25];
		Self *self = SELF(data);
		self_ensure_document(self);

		if( ! selfp->document )
			return TRUE;

		gdouble widget_width  = (gdouble)gtk_widget_get_allocated_width(w);
		gdouble widget_height = (gdouble)gtk_widget_get_allocated_height(w);
		
		gint text_width, text_height;

		sprintf(buffer, "%d / %d", selfp->slide + 1, poppler_document_get_n_pages(selfp->document));
		//g_debug("Display page counter: '%s'", buffer);
		PangoLayout *layout = pango_cairo_create_layout(cr);
		pango_layout_set_text(layout, buffer, -1);
		pango_layout_get_size(layout, &text_width, &text_height);

		text_width  /= PANGO_SCALE;
		text_height /= PANGO_SCALE;

		gdouble scalew = widget_width / text_width ;
		gdouble scaleh = widget_height / text_height;
		gdouble scale = scalew < scaleh ? scalew : scaleh;
		cairo_move_to(cr, widget_width - text_width, 0);
		//cairo_scale(cr, scale, scale);
		pango_cairo_show_layout(cr, layout);

		g_object_unref(layout);
		return TRUE;
	}

	/** Notify callback when the slide parameter of the presenter changes. **/
	private void on_notify_slide(G:Object *s, G:Param:Spec *pspec, gpointer data){
		PPGTK_UNUSED(pspec);
		PPGTK_UNUSED(data);
		Self *self = SELF(s);
		
		self_ensure_document(self);
		if( ! selfp->document )
			return;

		gtk_widget_queue_draw(GTK_WIDGET(selfp->draw_counter));

		PopplerPage *p;
		p = poppler_document_get_page(selfp->document, selfp->slide);
		if( ! p ){
			g_warning("Can not get document page %d", selfp->slide);
		}
		ppgtk_slide_set_page(PPGTK_SLIDE(selfp->draw_current), G_OBJECT(p));

		if( ! self_get_freeze(self) )
			ppgtk_display_present(selfp->display, p);

		p = poppler_document_get_page(selfp->document, selfp->slide + 1);
		if( ! p ){
			g_warning("Can not get document page %d", selfp->slide +1);
		}
		ppgtk_slide_set_page(PPGTK_SLIDE(selfp->draw_next), G_OBJECT(p));


		// Update actions to be sensitive
		GAction *a = NULL;
		a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_PREVIOUS);
		PPGTK_OBJECT_IS(a, G_TYPE_SIMPLE_ACTION);
		g_simple_action_set_enabled(G_SIMPLE_ACTION(a), selfp->document != NULL && selfp->slide > 0);

		a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_NEXT);
		PPGTK_OBJECT_IS(a, G_TYPE_SIMPLE_ACTION);
		g_simple_action_set_enabled(G_SIMPLE_ACTION(a), selfp->document != NULL &&
				selfp->slide +1 < poppler_document_get_n_pages(selfp->document));
	}

	/** Notify callback when the file changes **/
	private void on_notify_file(G:Object *s, G:Param:Spec *pspec, gpointer data){
		PPGTK_UNUSED(pspec);
		PPGTK_UNUSED(data);
		Self *self = SELF(s);
		self_reset(self);
	}

	/** Action callback when the "close" action is activated **/
	private void on_action_close(G:Action *a, G:Variant *param, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(param);
		if( GTK_IS_WINDOW(data) )
			gtk_widget_destroy(GTK_WIDGET(data));
	}


	/**
	  * Action callback to start the timer and presentation
	  */
	private void on_action_present(G:Action *a, G:Variant *param, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(param);
		Self *self = SELF(data);

		if( gtk_widget_get_visible(GTK_WIDGET(selfp->display)) ){
			g_debug("Switching presenter mode off");
			gtk_widget_hide(GTK_WIDGET(selfp->display));
		}
		else {
			g_debug("Switching presenter mode on");
			gtk_widget_show_all(GTK_WIDGET(selfp->display));
		}
	}


	/**
	  * Action callback to start the timer
	  */
	private void on_action_start(G:Action *a, G:Variant *param, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(param);
		Self *self = SELF(data);
		g_warning("NOT YET IMPLEMENTED - start timer");
	}

	/**
	  * Action callback to reset the timer and slide of the curret presentation
	  */
	private void on_action_reset(G:Action *a, G:Variant *param, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(param);
		Self *self = SELF(data);
		self_set_slide(self, 0);
		self_set_freeze(self, FALSE);
		g_warning("NOT YET IMPLEMENTED - stop timer");
	}

	/**
	  * Action callback to move to the previous slide.
	  */
	private void on_action_previous(G:Action *a, G:Variant *param, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(param);
		Self *self = SELF(data);
		if( selfp->slide <= 0 )
			return;
		self_set_slide(self, self_get_slide(self) - 1 );
	}

	/**
	  * Action callback to move to the next slide.
	  */
	private void on_action_next(G:Action *a, G:Variant *param, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(param);
		Self *self = SELF(data);
		if( selfp->slide + 1 >= poppler_document_get_n_pages(selfp->document) )
			return;
		self_set_slide(self, self_get_slide(self) + 1 );
	}

	/**
	  * Action callback to show an about dialog.
	  */
	private void on_action_about(G:Action *a, G:Variant *param, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(param);
		Self *self = SELF(data);

		GtkWidget *dialog = gtk_about_dialog_new();
		gtk_widget_set_parent(GTK_WIDGET(dialog), GTK_WIDGET(self));
		gtk_about_dialog_set_program_name(GTK_ABOUT_DIALOG(dialog), PPGTK_NAME);
		gtk_about_dialog_set_version(GTK_ABOUT_DIALOG(dialog), "PPGTK_VERSION_MAJOR.PPGTK_VERSION_MINOR.PPGTK_VERSION_PATCH");
		gtk_about_dialog_set_copyright(GTK_ABOUT_DIALOG(dialog), _("Copyright 2014"));
		gtk_about_dialog_set_license_type(GTK_ABOUT_DIALOG(dialog), GTK_LICENSE_GPL_3_0);
		gtk_about_dialog_set_website(GTK_ABOUT_DIALOG(dialog), "http://www.github.de/landesfeind/ppgtk");

		//gchar *authors[] = (gchar *[]){ PPGTK_AUTHOR, NULL };
		//gtk_about_dialog_set_authors(GTK_ABOUT_DIALOG(dialog), authors);

		gtk_dialog_run(GTK_DIALOG(dialog));
		gtk_widget_destroy(GTK_WIDGET(dialog));
	}

	private void on_action_open(G:Simple:Action *a, G:Variant *v, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(v);
		self_open_file(SELF(data), FALSE);
	}

	private void on_action_open_new_window(G:Simple:Action *a, G:Variant *v, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(v);
		self_open_file(SELF(data), TRUE);
	}

	private void on_action_blank(G:Simple:Action *a, G:Variant *v, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(v);
		Self *self = SELF(data);

		v = g_action_get_state(G_ACTION(a));
		//g_debug("Blank action with state: %s", v == NULL ? "NULLVARIANT" : g_variant_get_boolean(v) ? "true" :"false");
		v = g_variant_new("b", ! g_variant_get_boolean(v));
		g_action_change_state(G_ACTION(a), v);

		if( self_get_blank(self) ){
			ppgtk_display_present(selfp->display, NULL);
		}
		else {
			self_set_slide(self, selfp->slide);
		}

	}

	private void on_action_freeze(G:Simple:Action *a, G:Variant *v, gpointer data){
		PPGTK_UNUSED(a);
		PPGTK_UNUSED(v);
		Self *self = SELF(data);

		v = g_action_get_state(G_ACTION(a));
		//g_debug("Freeze action with state: %s", v == NULL ? "NULLVARIANT" : g_variant_get_boolean(v) ? "true" :"false");
		v = g_variant_new("b", ! g_variant_get_boolean(v));
		g_action_change_state(G_ACTION(a), v);

		if( ! self_get_freeze(self) ){
			self_set_slide(self, selfp->slide);
		}
	}

	private void on_change_state_freeze(G:Simple:Action *a, G:Variant *v, gpointer data){
		Self *self = SELF(data);
		g_debug("Changing freeze state to: %s", g_variant_get_boolean(v) ? "true" : "false");
		g_simple_action_set_state(a, v);
		self_set_slide(self, selfp->slide);
		//g_warning("NOT YET IMPLEMENTED");
	}
	private void on_change_state_blank(G:Simple:Action *a, G:Variant *v, gpointer data){
		g_debug("Changing blank state to: %s", g_variant_get_boolean(v) ? "true" : "false");
		g_simple_action_set_state(a, v);
		//g_warning("NOT YET IMPLEMENTED");
	}

	/**
	  * Display a message dialog that is modal for the PPGtk:Presenter window.
	  */
	private void display_message(self, GtkMessageType type, const gchar *msg, va_list vl){
		GString *message = g_string_new(NULL);
		g_string_vprintf(message, msg, vl);

		GtkWidget *dialog = gtk_message_dialog_new(GTK_WINDOW(self), 
					GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT, 
					type, 
					GTK_BUTTONS_OK,
					message->str);
		gtk_widget_show_all(GTK_WIDGET(dialog));
		gtk_dialog_run(GTK_DIALOG(dialog));
		gtk_widget_destroy(GTK_WIDGET(dialog));
	}

	/**
	  * Displays an error message. 
	  * @see ppgtk_presenter_display_message
	  */
	public void display_error(self, const gchar *msg, ...){
		va_list vl;
		va_start(vl, msg);
		self_display_message(self, GTK_MESSAGE_ERROR, msg, vl);
		va_end(vl);
	}

	/**
	  * Displays an informational message. 
	  * @see ppgtk_presenter_display_message
	  */
	public void display_info(self, const gchar *msg, ...){
		va_list vl;
		va_start(vl, msg);
		self_display_message(self, GTK_MESSAGE_INFO, msg, vl);
		va_end(vl);
	}

	/**
	  * Tries to open the file and to load the poppler object.
	  * Returns true when the file is successfully opened. 
	  */
	private gboolean ensure_document(self){
		if( selfp->document )
			return TRUE;

		if( ! selfp->file )
			return FALSE;

		if( ! g_file_query_exists(selfp->file, NULL) ){
			self_display_error(self, _("File does not exist"));
			return FALSE;
		}

		if( g_file_query_file_type(selfp->file, G_FILE_QUERY_INFO_NONE, NULL) != G_FILE_TYPE_REGULAR ){
			self_display_error(self, _("Not a regular file"));
			return FALSE;
		}

		GError *error = NULL;
		gchar *file = g_file_get_uri(selfp->file);
		selfp->document = poppler_document_new_from_file(file, NULL, &error);
		g_free(file);
		if( error ){
			g_error(error->message);
			self_display_error(self, error->message);
			return FALSE;
		}
		if( ! selfp->document ){
			self_display_error(self, _("Can not open document for unkown reason"));
			return FALSE;
		}
		
		g_debug("Displaying document with %d slides", poppler_document_get_n_pages(selfp->document));
		
		// Make title
		gchar *title = poppler_document_get_title(selfp->document);
		GString *titlen = g_string_new(title);
		g_string_append(titlen, " - ");
		g_string_append(titlen, PPGTK_NAME);
		gtk_window_set_title(GTK_WINDOW(self), titlen->str);
		g_string_free(titlen, TRUE);
		g_free(title);

		self_set_slide(self, 0);
	
		// Enable actions
		GAction *a;
		a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_NEXT);
		g_simple_action_set_enabled(G_SIMPLE_ACTION(a), TRUE);
		a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_PREVIOUS);
		g_simple_action_set_enabled(G_SIMPLE_ACTION(a), TRUE);
		a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_FREEZE);
		g_simple_action_set_enabled(G_SIMPLE_ACTION(a), TRUE);
		a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_BLANK);
		g_simple_action_set_enabled(G_SIMPLE_ACTION(a), TRUE);
		a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_PRESENT);
		g_simple_action_set_enabled(G_SIMPLE_ACTION(a), TRUE);
		a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_START);
		g_simple_action_set_enabled(G_SIMPLE_ACTION(a), TRUE);
		a = g_action_map_lookup_action(G_ACTION_MAP(self), PPGTK_ACTION_RESET);
		g_simple_action_set_enabled(G_SIMPLE_ACTION(a), TRUE);


		return TRUE;
	}



	public void open_file(self, gboolean new_window){
		if( ! selfp->filechooser ){
			selfp->filechooser = gtk_file_chooser_dialog_new(_("Open PDF Presentation"),
				NULL, GTK_FILE_CHOOSER_ACTION_OPEN,
				_("Cancel"), GTK_RESPONSE_CANCEL,
				_("Open"), GTK_RESPONSE_ACCEPT,
				NULL);

			gtk_file_chooser_set_local_only(GTK_FILE_CHOOSER(selfp->filechooser), TRUE);
			gtk_file_chooser_set_select_multiple(GTK_FILE_CHOOSER(selfp->filechooser), TRUE);

			GtkFileFilter *ff = gtk_file_filter_new();
			gtk_file_filter_set_name(ff, "Portable Document Format (*.pdf)");
			gtk_file_filter_add_mime_type(ff, "application/pdf");
			gtk_file_chooser_add_filter(GTK_FILE_CHOOSER(selfp->filechooser), ff);

			g_object_ref(selfp->filechooser);
		}

		g_debug("Running file chooser dialog to open PDF");
		gint res = gtk_dialog_run(GTK_DIALOG(selfp->filechooser));
		if( res != GTK_RESPONSE_ACCEPT )
			return;

		GSList *list = gtk_file_chooser_get_filenames(GTK_FILE_CHOOSER(selfp->filechooser));
		if( ! list )
			return;
		g_debug("Running file chooser dialog returned with %d files", (gint)g_slist_length(list));

		for(guint i = 0; i < g_slist_length(list); i++){
			gpointer data = g_slist_nth_data(list, i);
			if( data && G_IS_FILE(data) )
				self_open_file_single(self, G_FILE(data), new_window);
		}

		g_slist_free_full(list, g_free);
	}
	
	public void open_file_single(self, G:File *file (check null type), gboolean new_window){
		g_debug("Opening %swindow to show document %s", new_window ? "new " : "", g_file_get_path(file));

		if( new_window ){ 
			GtkApplication *app = gtk_window_get_application(GTK_WINDOW(self));
			Self *window = self_new_with_file(app, file);
			gtk_widget_show_all(GTK_WIDGET(window));
			gtk_application_add_window(GTK_APPLICATION(self), GTK_WINDOW(window));
		}
		else {
			self_set_file(self, G_OBJECT(file));
		}
	}
}
