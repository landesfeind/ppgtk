%h{
#include <ppgtk/ppgtk.h>
%}

class PPGtk:Slide from Gtk:Drawing:Area {
	private Poppler:Page *page = NULL
		unrefwith g_object_unref;
	property OBJECT page (
			object_type = Poppler:Page,
			export, link);

	constructor(self){
		g_signal_connect(G_OBJECT(self), "notify::page", G_CALLBACK(self_on_notify_page), NULL);
		g_signal_connect(G_OBJECT(self), "draw", G_CALLBACK(self_on_draw), NULL);
	}

	public PPGtkSlide *new(void){
		return GET_NEW;
	}

	private gboolean on_draw(GtkWidget *w, cairo_t *cr, gpointer data){
		Self *self = SELF(w);
		gdouble widget_width  = (gdouble)gtk_widget_get_allocated_width(w);
		gdouble widget_height = (gdouble)gtk_widget_get_allocated_height(w);

		cairo_save(cr);
		// Draw black background
		cairo_move_to(cr, 0, 0);
		cairo_line_to(cr, widget_width, 0);
		cairo_line_to(cr, widget_width, widget_height);
		cairo_line_to(cr, 0, widget_height);
		cairo_set_source_rgb(cr, 0, 0, 0);
		cairo_fill(cr);

		if( ! selfp->page )
			return TRUE;

		gdouble width, height;
		poppler_page_get_size(selfp->page, &width, &height);

		gdouble scale_x = widget_width  / width;
		gdouble scale_y = widget_height / height;
		gdouble scale_min = scale_x < scale_y ? scale_x : scale_y;

		gdouble offset_x = 0;
		gdouble offset_y = 0;
		if( widget_width > width*scale_min )
			offset_x = widget_width/2 - (width*scale_min)/2;
		if( widget_height > height*scale_min )
			offset_y = widget_height/2 - (height*scale_min)/2;
		g_debug("Offsetting slide display at %gx%g", offset_x, offset_y);
		cairo_move_to(cr, offset_x, offset_y);

		cairo_scale(cr, scale_min, scale_min);
		poppler_page_render(selfp->page, cr);

		return TRUE;
	}

	private void on_notify_page(G:Object *o, G:Param:Spec *spec, gpointer data){
		PPGTK_UNUSED(spec);
		PPGTK_UNUSED(data);
		if( ! GTK_IS_WIDGET(o) )
			return;
		gtk_widget_queue_draw(GTK_WIDGET(o));
	}
}
